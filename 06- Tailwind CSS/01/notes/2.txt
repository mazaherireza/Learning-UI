Configuration
-------------
... configuring and customizing your Tailwind installation.

By default, Tailwind will look for an optional tailwind.config.js file 
at the root of your project where you can define any customizations.

Creating your configuration file
--------------------------------
Generate a Tailwind config file for your project, using the Tailwind CLI utility included 
when you install the tailwindcss npm package:

npx tailwindcss init 

Content
-------
The content section is where you configure the paths to all of your HTML templates, 
JS components, and any other files that contain Tailwind class names. <-------------- *

content: [
  './pages/**/*.{html,js}',
  './components/**/*.{html,js}',
]

Theme
-----
The theme section is where you define your color palette, fonts, type scale, border sizes, breakpoints, 
(anything related to the visual design of your site) <--------------- *

theme: {
  colors: {},
  fontFamily: {},
  extend: {
    borderRadius: {
      "4xl": "2rem"
    }
  }
}

Plugins
-------
The plugins section allows you to register plugins with Tailwind that can be used to generate extra utilities, 
components, base styles, or custom variants.

plugins: [
  require('@tailwindcss/forms'),
  require('@tailwindcss/aspect-ratio'),
  require('@tailwindcss/typography'),
  require('tailwindcss-children'),
],

Presets
-------
The presets section allows you to specify your own custom base configuration 
instead of using Tailwind’s default base configuration.

presets: [
  require('@acmecorp/base-tailwind-config')
],

Prefix
------
The prefix option allows you to add a custom prefix to all of Tailwind’s generated utility classes. 
This can be really useful when layering Tailwind on top of existing CSS where there might be naming conflicts.

For example, you could add a tw- prefix by setting the prefix option like so:

/** @type {import('tailwindcss').Config} */
module.exports = {
  prefix: 'tw-',
}

Now every class will be generated with the configured prefix.

... this prefix is added after any VARIANT modifiers. 
That means that classes with responsive or state modifiers like sm: or hover: 
will still have the responsive or state modifier first, with your custom prefix appearing after the colon.

Prefixes are ONLY added to classes generated by Tailwind; <------------- *
no prefix will be added to your own custom classes.

That means if you add your own custom utility like this:

@layer utilities {
  .bg-brand-gradient { /* ... */ }
}

... the generated variants will not have your configured prefix.

Important
---------
The important option lets you control whether or not Tailwind’s utilities should be marked with !important.

To generate utilities as !important, set the important key in your configuration options to true:

/** @type {import('tailwindcss').Config} */
module.exports = {
  important: true,
}

Now all of Tailwind’s utility classes will be generated as !important.

This also applies to any custom utilities you define in your CSS using the @layer utilities directive.

Selector strategy
-----------------
Setting important to true can introduce some issues when incorporating third-party JS libraries that add inline styles to your elements. 
In those cases, Tailwind’s !important utilities defeat the inline styles, which can break your intended design.

To get around this, you can set important to an ID selector like #app instead"

/** @type {import('tailwindcss').Config} */
module.exports = {
  // ...
  important: '#app',
}

[Incomplete]

Important modifier
------------------
Alternatively, you can make any utility important by adding a ! character to the beginning.

The ! always goes at the beginning of the utility name, after any variants, but before any prefix:
<div class="sm:hover:!tw-font-bold">

This can be useful in rare situations where you need to increase specificity 
because you’re at war with some styles you don’t control.

Separator
---------
[Incomplete]